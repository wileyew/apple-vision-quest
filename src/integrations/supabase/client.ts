// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables with fallbacks for development
// TODO: Replace with your actual Supabase project credentials
// You need to create a new Supabase project at https://supabase.com
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://your-project.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "your-anon-key-here";

// Validate environment variables
if (!SUPABASE_URL || SUPABASE_URL === "https://your-project.supabase.co") {
  console.error('‚ùå Supabase URL not configured. Please create a Supabase project and update your .env file.');
  console.error('üìñ See SUPABASE_SETUP.md for instructions.');
}

if (!SUPABASE_PUBLISHABLE_KEY || SUPABASE_PUBLISHABLE_KEY === "your-anon-key-here") {
  console.error('‚ùå Supabase API key not configured. Please update your .env file with your project credentials.');
  console.error('üìñ See SUPABASE_SETUP.md for instructions.');
}

console.log('Initializing Supabase client with:', {
  url: SUPABASE_URL,
  hasKey: !!SUPABASE_PUBLISHABLE_KEY && SUPABASE_PUBLISHABLE_KEY !== "your-anon-key-here",
  keyLength: SUPABASE_PUBLISHABLE_KEY.length,
  isConfigured: SUPABASE_URL !== "https://your-project.supabase.co" && SUPABASE_PUBLISHABLE_KEY !== "your-anon-key-here",
});

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
  },
  global: {
    headers: {
      'X-Client-Info': 'apple-vision-quest',
    },
  },
});

// Test the connection with better error handling
const testConnection = async () => {
  try {
    console.log('Testing Supabase connection...');
    
    // Check if properly configured
    if (SUPABASE_URL === "https://your-project.supabase.co" || SUPABASE_PUBLISHABLE_KEY === "your-anon-key-here") {
      console.error('‚ùå Supabase not properly configured. Please follow the setup instructions in SUPABASE_SETUP.md');
      return;
    }
    
    // Test basic connectivity
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('Supabase connection error:', error);
      
      // Check for specific error types
      if (error.message.includes('fetch')) {
        console.error('Network error - check if Supabase is accessible');
      } else if (error.message.includes('invalid')) {
        console.error('Authentication error - check API keys');
      }
    } else {
      console.log('‚úÖ Supabase client initialized successfully');
      console.log('Session status:', data.session ? 'Active session' : 'No session');
    }
  } catch (err) {
    console.error('Unexpected error testing Supabase connection:', err);
  }
};

// Run connection test
testConnection();